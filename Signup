// signup
import React, { useState } from "react";
import axios from "axios";

const Signup = () => {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [message, setMessage] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Check if user already exists
      const res = await axios.get(`http://localhost:5000/users?email=${formData.email}`);
      if (res.data.length > 0) {
        setMessage("User already exists. Please login.");
        return;
      }

      // Save user
      await axios.post("http://localhost:5000/users", formData);
      setMessage("Signup successful! You can now log in.");
      setFormData({ email: "", password: "" });
    } catch (error) {
      console.error("Error during signup:", error);
      setMessage("Signup failed. Please try again.");
    }
  };

  return (
    <div className="form-container">
      <h2>Signup</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Email:</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
          />
        </div>
        <button type="submit">Sign Up</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default Signup;

// login

import React, { useState } from "react";
import axios from "axios";

const Login = () => {
  const [credentials, setCredentials] = useState({ email: "", password: "" });
  const [message, setMessage] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials({ ...credentials, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.get(`http://localhost:5000/users?email=${credentials.email}`);
      if (res.data.length > 0 && res.data[0].password === credentials.password) {
        setMessage("Login successful!");
        localStorage.setItem("isLoggedIn", true);
        // Redirect to the main app (optional)
      } else {
        setMessage("Invalid email or password.");
      }
    } catch (error) {
      console.error("Error during login:", error);
      setMessage("Login failed. Please try again.");
    }
  };

  return (
    <div className="form-container">
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Email:</label>
          <input
            type="email"
            name="email"
            value={credentials.email}
            onChange={handleChange}
            required
          />
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            name="password"
            value={credentials.password}
            onChange={handleChange}
            required
          />
        </div>
        <button type="submit">Login</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default Login;

//app
import React from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import Login from "./Login";
import Signup from "./Signup";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" />} />
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
      </Routes>
    </Router>
  );
};

export default App;


.form-container {
  width: 400px;
  margin: 50px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 10px;
  background-color: #f9f9f9;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  text-align: center;
}

h2 {
  color: #333;
  margin-bottom: 20px;
}

form {
  display: flex;
  flex-direction: column;
}

form div {
  margin-bottom: 15px;
}

form label {
  font-weight: bold;
  margin-bottom: 5px;
  display: block;
}

form input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  width: 100%;
}

button {
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

p {
  color: red;
  font-size: 12px;
}


//common css

/* General Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Arial', sans-serif;
}

/* Body Styling */
body {
  background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* App Container */
.app-container {
  width: 80%;
  max-width: 1200px;
  margin: auto;
  padding: 20px;
  background-color: #ffffff;
  box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  text-align: center;
}

/* Title Styling */
.app-title {
  font-size: 2rem;
  color: #333333;
  margin-bottom: 20px;
  font-weight: bold;
  border-bottom: 2px solid #007bff;
  display: inline-block;
  padding-bottom: 5px;
}

/* Button Styling */
button {
  padding: 10px 20px;
  margin: 10px;
  font-size: 1rem;
  color: #ffffff;
  background-color: #007bff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease;
}

button:hover {
  background-color: #0056b3;
  box-shadow: 0px 5px 15px rgba(0, 91, 187, 0.3);
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

/* Input Fields */
input, select, textarea {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 1rem;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Links */
a {
  color: #007bff;
  text-decoration: none;
  font-weight: bold;
}

a:hover {
  text-decoration: underline;
}

/* Form Styling */
form {
  margin: 20px auto;
  max-width: 400px;
}

form label {
  font-weight: bold;
  margin-bottom: 5px;
  display: block;
}

form .form-group {
  margin-bottom: 15px;
}

/* Card Styling */
.card {
  background-color: #ffffff;
  border: 1px solid #ddd;
  border-radius: 10px;
  padding: 15px;
  margin: 15px 0;
  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
  text-align: left;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);
}

.card-title {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 10px;
  color: #333333;
}

.card-content {
  font-size: 1rem;
  line-height: 1.5;
  color: #555555;
}

/* Utility Classes */
.text-center {
  text-align: center;
}

.flex {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.space-between {
  display: flex;
  justify-content: space-between;
}

.mt-10 {
  margin-top: 10px;
}

.mb-10 {
  margin-bottom: 10px;
}


//new 

/* General Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}

/* Body Styling */
body {
  background: linear-gradient(120deg, #fdfbfb, #ebedee);
  color: #333;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

/* App Container */
.app-container {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  padding: 20px;
  background: white;
  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.2);
  border-radius: 12px;
  text-align: center;
  overflow: hidden;
}

/* Header Styling */
.app-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #007bff;
  margin-bottom: 30px;
  text-transform: uppercase;
  letter-spacing: 2px;
  text-shadow: 0px 3px 6px rgba(0, 0, 0, 0.1);
  border-bottom: 3px solid #007bff;
  display: inline-block;
  padding-bottom: 10px;
}

/* Button Styling */
button {
  padding: 12px 25px;
  margin: 15px;
  font-size: 1.1rem;
  font-weight: bold;
  color: white;
  background: linear-gradient(120deg, #007bff, #0056b3);
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
}

button:hover {
  background: linear-gradient(120deg, #0056b3, #003d80);
  transform: translateY(-3px);
  box-shadow: 0px 5px 15px rgba(0, 91, 187, 0.5);
}

/* Card Styling */
.card {
  background: linear-gradient(120deg, #f9f9f9, #e9ecef);
  border: 1px solid #ddd;
  border-radius: 12px;
  padding: 20px;
  margin: 20px auto;
  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  text-align: left;
}

.card:hover {
  transform: scale(1.02);
  box-shadow: 0px 12px 25px rgba(0, 0, 0, 0.2);
}

.card-title {
  font-size: 1.5rem;
  font-weight: bold;
  color: #007bff;
  margin-bottom: 10px;
}

.card-content {
  font-size: 1rem;
  line-height: 1.5;
  color: #555555;
}

/* Form Styling */
form {
  margin: 20px auto;
  max-width: 500px;
}

form label {
  font-weight: bold;
  margin-bottom: 5px;
  display: block;
  color: #007bff;
}

form input, form select, form textarea {
  width: 100%;
  padding: 12px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 1rem;
  transition: all 0.3s ease;
}

form input:focus, form select:focus, form textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
}

/* Footer */
.footer {
  margin-top: 20px;
  font-size: 0.9rem;
  color: #555555;
}

/* Utility Classes */
.text-center {
  text-align: center;
}

.flex {
  display: flex;
  justify-content: center;
  align-items: center;
}

.space-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.mt-20 {
  margin-top: 20px;
}

.mb-20 {
  margin-bottom: 20px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .app-container {
    width: 95%;
    padding: 15px;
  }

  .app-title {
    font-size: 2rem;
  }

  button {
    padding: 10px 20px;
    font-size: 1rem;
  }

  .card {
    padding: 15px;
  }

  form {
    width: 100%;
  }
}

